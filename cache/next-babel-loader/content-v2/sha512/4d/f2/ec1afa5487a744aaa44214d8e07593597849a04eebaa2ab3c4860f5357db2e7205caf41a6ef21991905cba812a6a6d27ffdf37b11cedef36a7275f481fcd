{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const ADD_TO_CART = \"ADD_TO_CART\";\nexport const DECREASE_QUANTITY = \"DECREASE_QUANTITY\";\nexport const DELETE_FROM_CART = \"DELETE_FROM_CART\";\nexport const DELETE_ALL_FROM_CART = \"DELETE_ALL_FROM_CART\"; //add to cart\n\nexport const addToCart = (item, addToast, quantityCount, selectedProductColor, selectedProductSize) => {\n  return dispatch => {\n    if (addToast) {\n      addToast(\"Added To Cart\", {\n        appearance: \"success\",\n        autoDismiss: true\n      });\n    }\n\n    dispatch({\n      type: ADD_TO_CART,\n      payload: _objectSpread(_objectSpread({}, item), {}, {\n        quantity: quantityCount,\n        selectedProductColor: selectedProductColor ? selectedProductColor : item.selectedProductColor ? item.selectedProductColor : null,\n        selectedProductSize: selectedProductSize ? selectedProductSize : item.selectedProductSize ? item.selectedProductSize : null\n      })\n    });\n  };\n}; //decrease from cart\n\nexport const decreaseQuantity = (item, addToast) => {\n  return dispatch => {\n    if (addToast) {\n      addToast(\"Item Decremented From Cart\", {\n        appearance: \"warning\",\n        autoDismiss: true\n      });\n    }\n\n    dispatch({\n      type: DECREASE_QUANTITY,\n      payload: item\n    });\n  };\n}; //delete from cart\n\nexport const deleteFromCart = (item, addToast) => {\n  return dispatch => {\n    if (addToast) {\n      addToast(\"Removed From Cart\", {\n        appearance: \"error\",\n        autoDismiss: true\n      });\n    }\n\n    dispatch({\n      type: DELETE_FROM_CART,\n      payload: item\n    });\n  };\n}; //delete all from cart\n\nexport const deleteAllFromCart = addToast => {\n  return dispatch => {\n    if (addToast) {\n      addToast(\"Removed All From Cart\", {\n        appearance: \"error\",\n        autoDismiss: true\n      });\n    }\n\n    dispatch({\n      type: DELETE_ALL_FROM_CART\n    });\n  };\n}; // get stock of cart item\n\nexport const cartItemStock = (item, color, size) => {\n  // if (item.stock) {\n  //   return item.stock;\n  // } else {\n  //   return item.variation\n  //     .filter(single => single.color === color)[0]\n  //     .size.filter(single => single.name === size)[0].stock;\n  // }\n  return item;\n};","map":null,"metadata":{},"sourceType":"module"}