{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { v4 as uuidv4 } from \"uuid\";\nimport { ADD_TO_CART, DECREASE_QUANTITY, DELETE_FROM_CART, DELETE_ALL_FROM_CART } from \"../actions/cartActions\";\nconst initState = [];\n\nconst cartReducer = (state = initState, action) => {\n  const cartItems = state,\n        product = action.payload;\n\n  if (action.type === ADD_TO_CART) {\n    // for non variant products\n    if (product.variation === undefined) {\n      const cartItem = cartItems.filter(item => item.id === product.id)[0];\n\n      if (cartItem === undefined) {\n        return [...cartItems, _objectSpread(_objectSpread({}, product), {}, {\n          quantity: product.quantity ? product.quantity : 1,\n          cartItemId: uuidv4()\n        })];\n      } else {\n        return cartItems.map(item => item.cartItemId === cartItem.cartItemId ? _objectSpread(_objectSpread({}, item), {}, {\n          quantity: product.quantity ? item.quantity + product.quantity : item.quantity + 1\n        }) : item);\n      } // for variant products\n\n    } else {\n      const cartItem = cartItems.filter(item => item.id === product.id && product.selectedProductColor && product.selectedProductColor === item.selectedProductColor && product.selectedProductSize && product.selectedProductSize === item.selectedProductSize && (product.cartItemId ? product.cartItemId === item.cartItemId : true))[0];\n\n      if (cartItem === undefined) {\n        return [...cartItems, _objectSpread(_objectSpread({}, product), {}, {\n          quantity: product.quantity ? product.quantity : 1,\n          cartItemId: uuidv4()\n        })];\n      } else if (cartItem !== undefined && (cartItem.selectedProductColor !== product.selectedProductColor || cartItem.selectedProductSize !== product.selectedProductSize)) {\n        return [...cartItems, _objectSpread(_objectSpread({}, product), {}, {\n          quantity: product.quantity ? product.quantity : 1,\n          cartItemId: uuidv4()\n        })];\n      } else {\n        return cartItems.map(item => item.cartItemId === cartItem.cartItemId ? _objectSpread(_objectSpread({}, item), {}, {\n          quantity: product.quantity ? item.quantity + product.quantity : item.quantity + 1,\n          selectedProductColor: product.selectedProductColor,\n          selectedProductSize: product.selectedProductSize\n        }) : item);\n      }\n    }\n  }\n\n  if (action.type === DECREASE_QUANTITY) {\n    if (product.quantity === 1) {\n      const remainingItems = (cartItems, product) => cartItems.filter(cartItem => cartItem.cartItemId !== product.cartItemId);\n\n      return remainingItems(cartItems, product);\n    } else {\n      return cartItems.map(item => item.cartItemId === product.cartItemId ? _objectSpread(_objectSpread({}, item), {}, {\n        quantity: item.quantity - 1\n      }) : item);\n    }\n  }\n\n  if (action.type === DELETE_FROM_CART) {\n    const remainingItems = (cartItems, product) => cartItems.filter(cartItem => cartItem.cartItemId !== product.cartItemId);\n\n    return remainingItems(cartItems, product);\n  }\n\n  if (action.type === DELETE_ALL_FROM_CART) {\n    return cartItems.filter(item => {\n      return false;\n    });\n  }\n\n  return state;\n};\n\nexport default cartReducer;","map":null,"metadata":{},"sourceType":"module"}